y
x
y = 2:5
plot(x,y)
plot(x,y,pch=c(19,20,19,20))
?pch
plot(x,y,pch=c(19,NA,19,20))
a = c(1,3,5,3,1,NA,NA)
match(NA,a)
a[match(NA,a)-1]
a[match(NA,a)-2]
b = c(1,23,523,23,1)
b[match(NA,b)-1]
length(a)
length(b)
b = 1:7
colbind(a,b)
colBind(a,b)
cbind(a,b)
c = cbind(a,b)
c[,match(NA,c)-2]
match(NA,c)
i=1
multidata[match(NA,multidata[,"S",i])]
multidata[match(NA,multidata[,"S",2])]
match(NA,multidata[,"S",2]
)
match(NA,multidata[,"S",2])
match(NA,multidata[,"S",3])
match(NA,multidata[,"S",4])
match(NA,multidata[,"S",5])
match(NA,multidata[,"S",5])-1
multidata[match(NA,multidata[,"S",5])-1]
multidata[,"S",match(NA,multidata[,"S",5])-1]
match(NA,multidata[,"S",5])-1
multidata[match(NA,multidata[,"S",5])-1,"S",5]
multidata[match(NA,multidata[,"S",1])-1,"S",1]
  endpts = matrix(NA,dim(multidata)[3],2)#
  for(i in 1:dim(multidata)[3]) {#
    endpts[i,1] = multidata[match(NA,multidata[,"S",5])-1,"S",5]#
    endpts[i,2] = multidata[match(NA,multidata[,"K",5])-1,"K",5]#
  }
endpts
  endpts = matrix(NA,dim(multidata)[3],2)
endpts
  require(deSolve)                                                            #
  require(rootSolve)#
  require(gdata)#
  require(xtable)#
  require(Hmisc)#
  require(abind)#
  require(scatterplot3d)#
  require(rgl)
  source("R/treephysinout.R")#
  source("R/analysis.R")#
  source("R/multirunfunc.R")
  source("R/forced_ODEs.r")  #
  source("R/weibullcurves.R")
multidata = load.multi("Outputs/su_runs.R")
multiparms = load.multiparms("Outputs/su_runs.R")
  endpts = matrix(NA,dim(multidata)[3],2)#
  for(i in 1:dim(multidata)[3]) {#
    endpts[i,1] = multidata[match(NA,multidata[,"S",5])-1,"S",5]#
    endpts[i,2] = multidata[match(NA,multidata[,"K",5])-1,"K",5]#
  }
endpts
  endpts = matrix(NA,dim(multidata)[3],2)#
  for(i in 1:dim(multidata)[3]) {#
    endpts[i,1] = multidata[match(NA,multidata[,"S",i])-1,"S",i]#
    endpts[i,2] = multidata[match(NA,multidata[,"K",i])-1,"K",i]#
  }
endpts
deathtypes = deathtype(multidata,multiparms)
  source("R/analysis.R")
  source("R/analysis.R")
deathtypes = deathtype(multidata,multiparms)
deathtypes
plot(endpts)
plot(endpts[,1],endpts[,2])
  cols = heat.colors(dim(multidata)[3])
  matplot(multidata[,"S",],multidata[,"K",],type="l",col=cols,lty=1,lwd=1.5, xlab="Carbohydrate Stores (g)",ylab="Conductance")
  endpts = matrix(NA,dim(multidata)[3],2)#
  for(i in 1:dim(multidata)[3]) {#
    endpts[i,1] = multidata[match(NA,multidata[,"S",i])-1,"S",i]#
    endpts[i,2] = multidata[match(NA,multidata[,"K",i])-1,"K",i]#
  }
    points(endpnts,pch=19,col=cols)
    points(endpts,pch=19,col=cols)
    abline(h=parms$K.death,v=parms$S.death,col="blue")
    abline(h=multiparms[,"K.death"],v=multiparms[,"S.death"],col="blue")
  source("R/modelplots.R")
  source("R/modelplots.R")
dpaths(multidata,multiparms)
  source("R/modelplots.R")
dpaths(multidata,multiparms)
  source("R/modelplots.R")
dpaths(multidata,multiparms)
  source("R/modelplots.R")
dpaths(multidata,multiparms)
  source("R/modelplots.R")
dpaths(multidata,multiparms)
deathsurface(multidata,multiparms,"Psi_D","D")
  parmstates = cbind(multiparms,t(multidata[1,,]))
parmstates
  x = parmstates[,par1]
  x = parmstates[,par1]
par1="D"
par2="Psi_s"
  x = parmstates[,par1]
x
  y = parmstates[,par2]
y
  colors = rep(0,length(z))#
  deathtypes = deathtype(multidata,multiparms)#
  colors[which(deathtypes=="none")] = "green"#
  colors[which(deathtypes=="embolism")] = "blue"#
  colors[which(deathtypes=="starvation")] = "red"
  colors = rep(0,length(deathtimes))
  deathtimes = deathtime(multidata)
  colors = rep(0,length(deathtimes))
colors
  colors[which(deathtypes=="none")] = "green"#
  colors[which(deathtypes=="embolism")] = "blue"#
  colors[which(deathtypes=="starvation")] = "red"
colors
  plot3d(x,y,deathtimes,col=colors,type="h",xlab=par1,ylab=par2)
  plot3d(x,y,deathtimes,col=colors,type="h",xlab=par1,ylab=par2)
parmtable
multiparms
multiparms[,"S"]
multiparms[,"Psi_D"]
multiparms[,"a"]
unique(multiparms[,"a"])
  parmstates = cbind(multiparms,t(multidata[1,,]))
parmstates
unique(parmstates[,"a"])
unique(parmstates[,"D"])
unique(parmstates[,"Psi_s"])
?order
sort(unique(parmstates[,"Psi_s"]))
  deathtimes = deathtime(multidata)
deathtimes
  parmstates = cbind(multiparms,t(multidata[1,,]))
  axis1 = sort(unique(parmstates[,par1]))
  axis2 = sort(unique(parmstates[,par2]))
  deathmatrix = matrix(NA,length(axis1),length(axis2))
deathmatrix
  deathmatrix = matrix(NA,length(axis1),length(axis2),dimnames=c(axis1,axis2))
  deathmatrix = matrix(NA,length(axis1),length(axis2),dimnames=list(axis1,axis2))
deathmatrix
  deathmatrix = matrix(NA,length(axis1),length(axis2),dimnames=list(assign(par1,axis1),assign(par2,axis2)))
deathmatrix
Psi_s
dimnames(deathmatrix)
  deathmatrix = matrix(NA,length(axis1),length(axis2),dimnames=list(get(par1)=axis1,get(par2)=axis2))
  deathmatrix = matrix(NA,length(axis1),length(axis2),dimnames=list(assign(par1,axis1),assign(par2,axis2))
dimnames(deathmatrix)
Psi_s
deathmatrix
dimnames(deathmatrix)
get(par1)
par1
name(get(par1))
attr(par1)
attributes(par1)
attribute(par1)
par1
  assign(par1,sort(unique(parmstates[,par1])))
par1
D
  deathmatrix = matrix(NA,length(axis1),length(axis2),dimnames=list(assign(par1,axis1),assign(par2,axis2))
deathmatrix
  deathmatrix = matrix(NA,length(axis1),length(axis2),dimnames=list(assign(par1,axis1),assign(par2,axis2)))
deathmatrix
dimnames(deathmatrix)
deathmatrix[,as.character(2)]
deathmatrix[,as.character(-2)]
par1
parmstates[,par1]
ll
?ll
ll(parmstates)
parmstates[,par1]
which(parmstates==0.1)
which(parmstates[,par1]==0.1)
parmstates[which(parmstates[,par1]==0.1),par1]
which(parmstates[,par1]==0.1)
parmstates[which(parmstates[,par1]==0.1),par2]
which(parmstates[which(parmstates[,par1]==0.1),par2]==-3])
which(parmstates[which(parmstates[,par1]==0.1),par2]==-3)
deathtimes[which(parmstates[which(parmstates[,par1]==0.1),par2]==-3)]
  for(i in 1:length(axis1) {#
    for(j in 1:length(axis2)) {#
     deathmatrix[i,j] = deathtimes[which(parmstates[which(parmstates[,par1]==axis1[i]),par2]==axis2[j])]#
    }#
  }
  for(i in 1:length(axis1) {#
    for(j in 1:length(axis2)) {#
     deathmatrix[i,j] = deathtimes[which(parmstates[which(parmstates[,par1]==axis1[i]),par2]==axis2[j])]#
    }#
  }
  axis1 = sort(unique(parmstates[,par1]))
  axis2 = sort(unique(parmstates[,par2]))
  for(i in 1:length(axis1) {#
    for(j in 1:length(axis2)) {#
     deathmatrix[i,j] = deathtimes[which(parmstates[which(parmstates[,par1]==axis1[i]),par2]==axis2[j])]#
    }#
  }
deathtimes[which(parmstates[which(parmstates[,par1]==0.1),par2]==-3)]
which(parmstates[,par1]==axis1[i])
i=1
j=1
which(parmstates[,par1]==axis1[i])
parmstates[which(parmstates[,par1]==axis1[i]
)
parmstates[which(parmstates[,par1]==axis1[i]),par2]
which(parmstates[which(parmstates[,par1]==axis1[i]),par2]==axis2[j])
deathtimes[which(parmstates[which(parmstates[,par1]==axis1[i]),par2]==axis2[j])]
deathmatrix[i,j] = deathtimes[which(parmstates[which(parmstates[,par1]==axis1[i]),par2]==axis2[j])]
deathmatrix
  for(i in 1:length(axis1)) {#
    for(j in 1:length(axis2)) {#
     deathmatrix[i,j] = deathtimes[which(parmstates[which(parmstates[,par1]==axis1[i]),par2]==axis2[j])]#
    }#
  }
deathmatrix
deathtimes
?comment
deathstates
deathstates
deathtimes
parmstates[,"D"]
parmstates[,"Psi_s"]
axis1
axis2
which(parmstates[,par1]==axis1[i])
i
parmstates[which(parmstates[,par1]==axis1[i]),par2]
which(parmstates[which(parmstates[,par1]==axis1[i]),par2]==axis2[j])
j
parmstates(,par2)
  parmstates = cbind(multiparms,t(multidata[1,,]))
parmstates(,par2)
parmstates[,par2]
which(parmstates[which(parmstates[,par1]==axis1[i]),par2
which(parmstates[which(parmstates[,par1]==axis1[i])
]
which(parmstates[which(parmstates[,par1]==axis1[i]),par2]==axis2[j])
which(parmstates[,par1]==axis1[i])
which(parmstates[,par2]==axis2[j])
?intersect
intersect(which(parmstates[,par1]==axis1[i]),which(parmstates[,par2]==axis2[j]))
  for(i in 1:length(axis1)) {#
    for(j in 1:length(axis2)) {#
     deathmatrix[i,j] = deathtimes[intersect(which(parmstates[,par1]==axis1[i]),which(parmstates[,par2]==axis2[j]))]#
    }#
  }
deathmatrix
?reduce
?Reduce
runmodel("realparms.R","exstart",plots="fourplot")
runmodel("realparms.R","exstart",plots="fourplot")
runmodel("realparms.R","exstart",plots="fourplot")
runmodel("realparms.R","exstart",plots="fourplot")
parms = load.parmtable("px.R")
weibullplot(modelout,parms)
weibullplot(modelout,parms)
runmodel("px.R","oldp",plots="fourplot")
runmodel("px.R","oldp",plots="fourplot")
runmodel("px.R","oldp",plots="fourplot")
runmodel("parmfile.R","oldp",plots="fourplot")
runmodel("parmfile.R","oldp",plots="fourplot")
runmodel("realparms.R","oldp",plots="fourplot")
modelout = load.output("Outputs/oldp_20110726_154915.R")
modelout[,"G"]
plot(modelout[,"G"])
plot(modelout[,"time"],modelout[,"G"])
parms = load.outparms("Outputs/oldp_20110726_154915.R")
fourplot(modelout,parms)
runmodel("realparms.R","oldp",plots="fourplot")
deathtime(modelout)
plot(modelout[,"time"],modelout[,"ABA"])
plot(modelout[,"time"],modelout[,"Psi_l"])
plot(modelout[,"time"],modelout[,"K"])
plot(modelout[,"time"],modelout[,"D"]*modelout[,"G]"/modelout[,"K"])
plot(modelout[,"time"],((modelout[,"D"]*modelout[,"G"])/modelout[,"K"]))
plot(modelout[,"time"],(modelout[,"D"])
)
plot(modelout[,"time"],(modelout[,"G"])
)
plot(modelout[,"time"],((modelout[,"D"]*modelout[,"G"])/modelout[,"K"]))
  source("R/forced_ODEs.r")
runmodel("realparms.R","oldp",plots="fourplot")
runmodel("realparms.R","oldp",plots="fourplot")
  source("R/forced_ODEs.r")
runmodel("realparms.R","oldp",plots="fourplot")
runmodel("realparms.R","oldp",plots="fourplot")
runmodel("realparms.R","oldp",plots="fourplot")
runmodel("realparms.R","oldp",plots="fourplot")
runmodel("realparms.R","oldp",plots="fourplot")
runmodel("realparms.R","oldp",plots="fourplot")
runmodel("realparms.R","oldp",plots="fourplot")

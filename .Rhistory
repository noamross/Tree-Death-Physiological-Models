attribute(par1)
par1
  assign(par1,sort(unique(parmstates[,par1])))
par1
D
  deathmatrix = matrix(NA,length(axis1),length(axis2),dimnames=list(assign(par1,axis1),assign(par2,axis2))
deathmatrix
  deathmatrix = matrix(NA,length(axis1),length(axis2),dimnames=list(assign(par1,axis1),assign(par2,axis2)))
deathmatrix
dimnames(deathmatrix)
deathmatrix[,as.character(2)]
deathmatrix[,as.character(-2)]
par1
parmstates[,par1]
ll
?ll
ll(parmstates)
parmstates[,par1]
which(parmstates==0.1)
which(parmstates[,par1]==0.1)
parmstates[which(parmstates[,par1]==0.1),par1]
which(parmstates[,par1]==0.1)
parmstates[which(parmstates[,par1]==0.1),par2]
which(parmstates[which(parmstates[,par1]==0.1),par2]==-3])
which(parmstates[which(parmstates[,par1]==0.1),par2]==-3)
deathtimes[which(parmstates[which(parmstates[,par1]==0.1),par2]==-3)]
  for(i in 1:length(axis1) {#
    for(j in 1:length(axis2)) {#
     deathmatrix[i,j] = deathtimes[which(parmstates[which(parmstates[,par1]==axis1[i]),par2]==axis2[j])]#
    }#
  }
  axis1 = sort(unique(parmstates[,par1]))
  axis2 = sort(unique(parmstates[,par2]))
  for(i in 1:length(axis1) {#
    for(j in 1:length(axis2)) {#
     deathmatrix[i,j] = deathtimes[which(parmstates[which(parmstates[,par1]==axis1[i]),par2]==axis2[j])]#
    }#
  }
deathtimes[which(parmstates[which(parmstates[,par1]==0.1),par2]==-3)]
which(parmstates[,par1]==axis1[i])
i=1
j=1
which(parmstates[,par1]==axis1[i])
parmstates[which(parmstates[,par1]==axis1[i]
)
parmstates[which(parmstates[,par1]==axis1[i]),par2]
which(parmstates[which(parmstates[,par1]==axis1[i]),par2]==axis2[j])
deathtimes[which(parmstates[which(parmstates[,par1]==axis1[i]),par2]==axis2[j])]
deathmatrix[i,j] = deathtimes[which(parmstates[which(parmstates[,par1]==axis1[i]),par2]==axis2[j])]
deathmatrix
  for(i in 1:length(axis1)) {#
    for(j in 1:length(axis2)) {#
     deathmatrix[i,j] = deathtimes[which(parmstates[which(parmstates[,par1]==axis1[i]),par2]==axis2[j])]#
    }#
  }
deathmatrix
deathtimes
?comment
deathstates
deathtimes
parmstates[,"D"]
parmstates[,"Psi_s"]
axis1
axis2
which(parmstates[,par1]==axis1[i])
i
parmstates[which(parmstates[,par1]==axis1[i]),par2]
which(parmstates[which(parmstates[,par1]==axis1[i]),par2]==axis2[j])
j
parmstates(,par2)
  parmstates = cbind(multiparms,t(multidata[1,,]))
parmstates(,par2)
parmstates[,par2]
which(parmstates[which(parmstates[,par1]==axis1[i]),par2
which(parmstates[which(parmstates[,par1]==axis1[i])
]
which(parmstates[which(parmstates[,par1]==axis1[i]),par2]==axis2[j])
which(parmstates[,par1]==axis1[i])
which(parmstates[,par2]==axis2[j])
?intersect
intersect(which(parmstates[,par1]==axis1[i]),which(parmstates[,par2]==axis2[j]))
  for(i in 1:length(axis1)) {#
    for(j in 1:length(axis2)) {#
     deathmatrix[i,j] = deathtimes[intersect(which(parmstates[,par1]==axis1[i]),which(parmstates[,par2]==axis2[j]))]#
    }#
  }
deathmatrix
?reduce
?Reduce
runmodel("realparms.R","exstart",plots="fourplot")
parms = load.parmtable("px.R")
weibullplot(modelout,parms)
runmodel("px.R","oldp",plots="fourplot")
runmodel("parmfile.R","oldp",plots="fourplot")
runmodel("realparms.R","oldp",plots="fourplot")
modelout = load.output("Outputs/oldp_20110726_154915.R")
modelout[,"G"]
plot(modelout[,"G"])
plot(modelout[,"time"],modelout[,"G"])
parms = load.outparms("Outputs/oldp_20110726_154915.R")
fourplot(modelout,parms)
runmodel("realparms.R","oldp",plots="fourplot")
deathtime(modelout)
plot(modelout[,"time"],modelout[,"ABA"])
plot(modelout[,"time"],modelout[,"Psi_l"])
plot(modelout[,"time"],modelout[,"K"])
plot(modelout[,"time"],modelout[,"D"]*modelout[,"G]"/modelout[,"K"])
plot(modelout[,"time"],((modelout[,"D"]*modelout[,"G"])/modelout[,"K"]))
plot(modelout[,"time"],(modelout[,"D"])
)
plot(modelout[,"time"],(modelout[,"G"])
)
plot(modelout[,"time"],((modelout[,"D"]*modelout[,"G"])/modelout[,"K"]))
  source("R/forced_ODEs.r")
runmodel("realparms.R","oldp",plots="fourplot")
  source("R/forced_ODEs.r")
runmodel("realparms.R","oldp",plots="fourplot")
#load relevant packages#
#
  require(deSolve)                                                            #
  require(rootSolve)#
  require(gdata)#
  require(xtable)#
  require(Hmisc)#
  require(abind)#
  require(scatterplot3d)#
  require(rgl)#
  #
#load relevant files#
#
  source("R/forced_ODEs.r")  #
  source("R/weibullcurves.R")#
  source("R/modelplots.R")#
  source("R/treephysinout.R")#
  source("R/analysis.R")#
  source("R/multirunfunc.R")
modelout = load.output("oldp_20110726_162717.R")
modelout = load.output("Output/oldp_20110726_162717.R")
modelout = load.output("Outputs/oldp_20110726_162717.R")
parms = load.outparms("Outputs/oldp_20110726_162717.R")
parms
fourplot(modelout,parms)
4,2
states0
Psi_s=1
D = 2
parms
c(parms,Psi_s,D)
c(parms,Psi_s=Psi_s,D=D)
#load relevant packages#
#
  require(deSolve)                                                            #
  require(rootSolve)#
  require(gdata)#
  require(xtable)#
  require(Hmisc)#
  require(abind)#
  require(scatterplot3d)#
  require(rgl)#
  #
#load relevant files#
#
  source("R/forced_ODEs.r")  #
  source("R/weibullcurves.R")#
  source("R/modelplots.R")#
  source("R/treephysinout.R")#
  source("R/analysis.R")#
  source("R/multirunfunc.R")
parmfile=("px.R")
parmfile
  parms=load.parmtable(parmfile)
  states0=load.statetable(parmfile)
  forcings=load.forcings(parmfile)
  comment=load.comment(parmfile)
  times=load.times(parmfile)
  cat(comment,sep="\n")
states0
  for(i in 1:(ncol(forcings)-1)) {#
    assign(paste("func.",colnames(forcings)[i+1],sep=""), approxfun(x=forcings[,1], y=forcings[,(i+1)],method="constant", rule=2, f=0),envir = .GlobalEnv)#
  }
forcings
Psi_s.func
func.Psi_s
func.Psi_s(30)
func.D(12)
?approxfun
dpath(modelout,parms)
  source("R/modelplots.R")
carbonplot(modelout,parms)
multirun("realparms.R","changeparms.R","newtest")
multirun("realparms.R","changeparms.R","newtest")
  changes=load.changes(changefile)
changefile="changparms.R"
  changes=load.changes(changefile)
changefile="changeparms.R"
  changes=load.changes(changefile)
  changes=load.changes(changefile)
  source("R/treephysinout.R")
  changes=load.changes(changefile)
load.changes
file = changefile
  changes = as.matrix(read.table(file,header=TRUE,sep=" ",skip=3,strip.white=TRUE))
  changes = as.matrix(read.table(file,header=TRUE,sep=" ",skip=3,strip.white=TRUE))
  changes = as.matrix(read.table(file,header=TRUE,sep=" ",skip=3,strip.white=TRUE))
multirun("realparms.R","changeparms.R","newtest")
parmfile
parmfile = "realparms.R"
  parms=load.parmtable(parmfile)#
  states0=load.statetable(parmfile)#
  forcings=load.forcings(parmfile)#
  comment=load.comment(parmfile)#
  changes=load.changes(changefile)#
  times=load.times(parmfile)#
  cat(comment,sep="\n")#
  filelist = matrix(0,nrow(changes),1)
  for(i in 1:nrow(changes)) {  #create a loop for runs equal to the length of the changed parameter matrix#
    for(j in 1:ncol(changes)) {  #this loop replaces the parameter values in the parms list with the one in this row of changes#
      if(!is.na(match(colnames(changes)[j],names(parms)))){parms[colnames(changes)[j]] = changes[i,j]}#
      if(!is.na(match(colnames(changes)[j],colnames(forcings)))){forcings[,colnames((changes))[j]] = changes[i,j]}#
      if(!is.na(match(colnames(changes)[j],names(states0)))){states0[colnames(changes)[j]] = changes[i,j]}#
    }
pamrms
parms
i = 1
j = 1
  for(i in 1:nrow(changes)) {  #create a loop for runs equal to the length of the changed parameter matrix#
    for(j in 1:ncol(changes)) {  #this loop replaces the parameter values in the parms list with the one in this row of changes#
      if(!is.na(match(colnames(changes)[j],names(parms)))){parms[colnames(changes)[j]] = changes[i,j]}#
      if(!is.na(match(colnames(changes)[j],colnames(forcings)))){forcings[,colnames((changes))[j]] = changes[i,j]}#
      if(!is.na(match(colnames(changes)[j],names(states0)))){states0[colnames(changes)[j]] = changes[i,j]}#
    }#
#
    for(k in 1:(ncol(forcings)-1)) {#
      assign(paste("func.",colnames(forcings)[k+1],sep=""), approxfun(x=forcings[,1], y=forcings[,(k+1)],method="constant", rule=2, f=0),envir = .GlobalEnv)#
    }#
 #
    modelout=0#
    modelout = lsodar(y=states0, times=times, func=tree_odes, parms=parms,rootfunc=death_func)#
    if(dim(modelout)[1]<length(times)){#
      modelout=rbind(modelout,matrix(NA,length(times)-dim(modelout)[1],dim(modelout)[2]))#
      modelout[,"time"] = times#
    }
    runfile = save.run(parms=parms,modelout=modelout,outfile=paste(outfile,i,sep=""),comment=comment)#
    filelist[i,1] = runfile#
#    filelist[i,2] = date()#
  #
  }
i
j
k
i
i=1
j=1
k=1
    for(j in 1:ncol(changes)) {  #this loop replaces the parameter values in the parms list with the one in this row of changes
      if(!is.na(match(colnames(changes)[j],names(parms)))){parms[colnames(changes)[j]] = changes[i,j]}#
      if(!is.na(match(colnames(changes)[j],colnames(forcings)))){forcings[,colnames((changes))[j]] = changes[i,j]}#
      if(!is.na(match(colnames(changes)[j],names(states0)))){states0[colnames(changes)[j]] = changes[i,j]}#
    }
changes
parms
states
states0
forcings
i = 2
    for(j in 1:ncol(changes)) {  #this loop replaces the parameter values in the parms list with the one in this row of changes#
      if(!is.na(match(colnames(changes)[j],names(parms)))){parms[colnames(changes)[j]] = changes[i,j]}#
      if(!is.na(match(colnames(changes)[j],colnames(forcings)))){forcings[,colnames((changes))[j]] = changes[i,j]}#
      if(!is.na(match(colnames(changes)[j],names(states0)))){states0[colnames(changes)[j]] = changes[i,j]}#
    }
forcings
    for(k in 1:(ncol(forcings)-1)) {#
      assign(paste("func.",colnames(forcings)[k+1],sep=""), approxfun(x=forcings[,1], y=forcings[,(k+1)],method="constant", rule=2, f=0),envir = .GlobalEnv)#
    }
    modelout=0
    modelout = lsodar(y=states0, times=times, func=tree_odes, parms=parms,rootfunc=death_func)
time = 1
  with(c(as.list(states), parms), { #extract parameters from 'parms' vector
    Psi_s = func.Psi_s(time)
})
states=states0
  with(c(as.list(states), parms), { #extract parameters from 'parms' vector
    Psi_s = func.Psi_s(time)
})
Psi_s
func.Psi_s(1)
  with(c(as.list(states), parms), { #extract parameters from 'parms' vector#
    Psi_s = func.Psi_s(time)#
    D = func.D(time)#
    Psi_l = uniroot(leaf,c(-30,(b/K + Psi_s - h*rho*g)),parms = c(as.list(states),parms,as.list(Psi_s=Psi_s,D=D)))$root #Calculate leaf water potential#
    G = (K/D)*(Psi_s - Psi_l - h*rho*g)#
    ABA = (-a*Psi_s)/(G*D + b)#
    X = -(Psi_s - Psi_l - h*rho*g) # Calculate xylem pressure#
    #G = gmax - (-X/gs) # Calculate stomatal flow.  #
    #G = gmax - (-X/gs) # Calculate stomatal flow;#
    #
    P = alpha * G                       #calculate photosynthesis and carbon allocation to:#
    R = beta * S * (1 - K/kmax)         #respiration from xylem repair#
    B = gamma * S * exp(-(-X/l.B)^k.B)  #biomass growth - (Slow growth is associated with high mortality Pedersen 1998te)#
    M = m                             #maintenance respiration#
    #
    dS = P - R - M - B  #daily change in TNC, g d-1#
   # dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    dK = -kmax*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    #
    return(list(c(dS,dK),c(Psi_s=Psi_s, D=D, Psi_l=Psi_l,G=G,ABA=ABA,X=X, P=P, R=R, B=B, M=M)))   #return a list of of both derivatives and other state variables#
  })
time = 1
    Psi_s = func.Psi_s(time)
Psi_s
    D = func.D(time)
D
    Psi_l = uniroot(leaf,c(-30,(b/K + Psi_s - h*rho*g)),parms = c(as.list(states),parms,as.list(Psi_s=Psi_s,D=D)))$root #Calculate leaf water potential
  with(c(as.list(states), parms) {Psi_l = uniroot(leaf,c(-30,(b/K + Psi_s - h*rho*g)),parms = c(as.list(states),parms,as.list(Psi_s=Psi_s,D=D)))$root})
  with(c(as.list(states), parms),Psi_l = uniroot(leaf,c(-30,(b/K + Psi_s - h*rho*g)),parms = c(as.list(states),parms,as.list(Psi_s=Psi_s,D=D)))$root)
leaf
  with(c(as.list(states), parms), { #extract parameters from 'parms' vector
    Psi_l = uniroot(leaf,c(-30,(b/K + Psi_s - h*rho*g)),parms = c(as.list(states),parms,as.list(Psi_s=Psi_s,D=D)))$root #Calculate leaf water potential
)
#
  source("R/forced_ODEs.r")  #
  source("R/weibullcurves.R")#
  source("R/modelplots.R")#
  source("R/treephysinout.R")#
  source("R/analysis.R")#
  source("R/multirunfunc.R")
multirun("realparms.R","changeparms.R","newtest")
  with(c(as.list(states), parms), { #extract parameters from 'parms' vector#
    Psi_s = func.Psi_s(time)#
    D = func.D(time)#
    Psi_l = uniroot(leaf,c(-30,(b/K + Psi_s - h*rho*g)),parms = c(as.list(states),parms,as.list(Psi_s=Psi_s,D=D)))$root #Calculate leaf water potential#
    G = (K/D)*(Psi_s - Psi_l - h*rho*g))#
    #
    ABA = (-a*Psi_s)/(G*D + b)#
    X = -(Psi_s - Psi_l - h*rho*g) # Calculate xylem pressure#
    #G = gmax - (-X/gs) # Calculate stomatal flow.  #
    #G = gmax - (-X/gs) # Calculate stomatal flow;#
    #
    P = alpha * G                       #calculate photosynthesis and carbon allocation to:#
    R = beta * S * (1 - K/kmax)         #respiration from xylem repair#
    B = gamma * S * exp(-(-X/l.B)^k.B)  #biomass growth - (Slow growth is associated with high mortality Pedersen 1998te)#
    M = m                             #maintenance respiration#
    #
    dS = P - R - M - B  #daily change in TNC, g d-1#
   # dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    dK = -kmax*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    #
    return(list(c(dS,dK),c(Psi_s=Psi_s, D=D, Psi_l=Psi_l,G=G,ABA=ABA,X=X, P=P, R=R, B=B, M=M)))   #return a list of of both derivatives and other state variables#
  })
  source("R/treephysinout.R")
  with(c(as.list(states), parms), { #extract parameters from 'parms' vector#
    Psi_s = func.Psi_s(time)#
    D = func.D(time)#
    Psi_l = uniroot(leaf,c(-30,(b/K + Psi_s - h*rho*g)),parms = c(as.list(states),parms,Psi_s=Psi_s,D=D))$root #Calculate leaf water potential#
    G = (K/D)*(Psi_s - Psi_l - h*rho*g))#
    #
    ABA = (-a*Psi_s)/(G*D + b)#
    X = -(Psi_s - Psi_l - h*rho*g) # Calculate xylem pressure#
    #G = gmax - (-X/gs) # Calculate stomatal flow.  #
    #G = gmax - (-X/gs) # Calculate stomatal flow;#
    #
    P = alpha * G                       #calculate photosynthesis and carbon allocation to:#
    R = beta * S * (1 - K/kmax)         #respiration from xylem repair#
    B = gamma * S * exp(-(-X/l.B)^k.B)  #biomass growth - (Slow growth is associated with high mortality Pedersen 1998te)#
    M = m                             #maintenance respiration#
    #
    dS = P - R - M - B  #daily change in TNC, g d-1#
   # dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    dK = -kmax*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    #
    return(list(c(dS,dK),c(Psi_s=Psi_s, D=D, Psi_l=Psi_l,G=G,ABA=ABA,X=X, P=P, R=R, B=B, M=M)))   #return a list of of both derivatives and other state variables#
  })
  source("R/forced_ODEs.r")
 with(c(as.list(states), parms), { #extract parameters from 'parms' vector#
    Psi_s = func.Psi_s(time)#
    D = func.D(time)#
    Psi_l = uniroot(leaf,c(-30,(b/K + Psi_s - h*rho*g)),parms = c(as.list(states),parms,Psi_s=Psi_s,D=D))$root #Calculate leaf water potential#
    G = (K/D)*(Psi_s - Psi_l - h*rho*g)#
    #
    ABA = (-a*Psi_s)/(G*D + b)#
    X = -(Psi_s - Psi_l - h*rho*g) # Calculate xylem pressure#
    #G = gmax - (-X/gs) # Calculate stomatal flow.  #
    #G = gmax - (-X/gs) # Calculate stomatal flow;#
    #
    P = alpha * G                       #calculate photosynthesis and carbon allocation to:#
    R = beta * S * (1 - K/kmax)         #respiration from xylem repair#
    B = gamma * S * exp(-(-X/l.B)^k.B)  #biomass growth - (Slow growth is associated with high mortality Pedersen 1998te)#
    M = m                             #maintenance respiration#
    #
    dS = P - R - M - B  #daily change in TNC, g d-1#
   # dK = -K*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    dK = -kmax*(k.K/l.K)*((-X/l.K)^(k.K-1))*exp(-((-X/l.K)^k.K)) + theta*R #daily change in xylem conductance, mmol s-1 MPa-1 d-1 #
    #
    return(list(c(dS,dK),c(Psi_s=Psi_s, D=D, Psi_l=Psi_l,G=G,ABA=ABA,X=X, P=P, R=R, B=B, M=M)))   #return a list of of both derivatives and other state variables#
  })
multirun("realparms.R","changeparms.R","newtest")
multidata = load.multi("Outputs/newtest_runs.R")
multiparms = load.multiparms("Outputs/newtest_runs.R")
dpaths(multidata,multiparms)
multiparms
multidata
runmodel("realparms.R","degrade",plots="fourplot")
  source("R/forced_ODEs.r")  #
  source("R/weibullcurves.R")#
  source("R/modelplots.R")#
  source("R/treephysinout.R")#
  source("R/analysis.R")#
  source("R/multirunfunc.R")
runmodel("realparms.R","degrade",plots="fourplot")
runmodel("realparms.R","degrade",plots="fourplot")
multirun("realparms.R","changeparms.R","tautest")
multidata = load.multi("Outputs/tautest_runs.R")
multiparms = load.multiparm("Outputs/tautest_runs.R")
multiparms = load.multiparms("Outputs/tautest_runs.R")
dpaths(multidata,multiparms)
dpaths(multidata,multiparms)
fourplot(multidata[,,1],multiparms[1,])
fourplot(multidata[,,1],as.list(multiparms[1,]))
fourplot(multidata[,,2],as.list(multiparms[2,]))
#
  source("R/forced_ODEs.r")  #
  source("R/weibullcurves.R")#
  source("R/modelplots.R")#
  source("R/treephysinout.R")#
  source("R/analysis.R")#
  source("R/multirunfunc.R")
multirun("realparms.R","changeparms.R","tautest2")
multidata = load.multi("Outputs/tautest2_runs.R")
multiparms = load.multiparms("Outputs/tautest_runs2.R")
multiparms = load.multiparms("Outputs/tautest2_runs.R")
fourplot(multidata[,,1],as.list(multiparms[1,]))
fourplot(multidata[,,2],as.list(multiparms[2,]))
fourplot(multidata[,,3],as.list(multiparms[3,]))
fourplot(multidata[,,1],as.list(multiparms[1,]))
fourplot(multidata[,,2],as.list(multiparms[2,]))
fourplot(multidata[,,4],as.list(multiparms[4,]))
runmodel("realparms.R","alpha",plot="fourplot")
runmodel("realparms.R","alpha",plot="fourplot")
runmodel("realparms.R","alpha",plot="fourplot")
runmodel("realparms.R","alpha",plot="fourplot")
runmodel("realparms.R","alpha",plot="fourplot")
runmodel("realparms.R","alpha",plot="fourplot")
runmodel("realparms.R","alpha",plot="fourplot")
runmodel("realparms.R","alpha",plot="fourplot")
runmodel("realparms.R","alpha",plot="fourplot")
